components:
  schemas:
    ServerInfoRequest:
      type: object
      properties:
        counters:
          type: boolean
          description: |
            If true, return metrics about the job queue, ledger store, and API method activity. The default is false.

    Info:
      type: object
      properties:
        amendment_blocked:
          type: boolean
          description: |
            (May be omitted) If true, this server is amendment blocked. If the server is not amendment blocked, the response omits this field.
        build_version:
          type: string
          description: |
            The version number of the running rippled server.
        # TODO: Add fields to closed_ledger
        closed_ledger:
          type: object
          description: >
            (May be omitted) Information on the most recently closed ledger that has not been validated by consensus. 
            If the most recently validated ledger is available, the response omits this field and includes validated_ledger instead. 
            The member fields are the same as the validated_ledger field.
        complete_ledgers:
          type: string
          description: >
            Range expression indicating the sequence numbers of the ledger versions the local rippled has in its database. 
            This may be a disjoint sequence such as 24900901-24900984,24901116-24901158. 
            If the server does not have any complete ledgers (for example, it recently started syncing with the network), this is the string empty.
        hostid:
          type: string
          description: |
            On an admin request, returns the hostname of the server running the rippled instance; otherwise, returns a single RFC-1751 word based on the node public key.
        io_latency_ms:
          type: number
          description: >
            Amount of time spent waiting for I/O operations, in milliseconds. 
            If this number is not very, very low, then the rippled server is probably having serious load issues.

    ServerInfoSuccessResponse:
      type: object
      properties:
        info:
          $ref: '#/components/schemas/Info'
        status:
          type: string
          enum:
            - success

    ServerInfoErrorResponse:
      type: object
      properties:
        error:
          type: string
          oneOf:
            - $ref: '../base.yaml#/components/schemas/UniversalErrorResponseCodes'
        request:
          $ref: '#/components/schemas/ServerInfoRequest'
        status:
          type: string
          enum:
            - error
      required:
        - status
        - error
        - request
