openapi: 3.1.0
info:
  title: XRP Ledger Public API
  description: A JSON RPC API used to query rippled.
  version: 1.0.0

servers:
	# Should this list contain non-ripple servers? All UNL ws_urls? Just public infrastructure?
	- url: https://s1.ripple.com:51234
    description: Mainnet Public API server
	# Should testnet / devnet / xahau / etc. be on this list?
  - url: wss://s.altnet.rippletest.net:51234/
		description: Testnet (not for production usage)

paths:
	# We use OpenAPI's discriminator field with the `method` name to delineate between the options
	/:
    post:
      summary: Send JSON-RPC request to server
      requestBody:
        description: JSON-RPC request object
        content:
          application/json:
            schema:
							$ref: "#/components/schemas/RequestType"
        required: true
      operationId: "POST"
      responses:
        "200":
          description: JSON-RPC response object
          content:
            application/json:
              schema:
								discriminator:
									propertyName: method
									mapping:
										account_channels: "account_channels.yaml#/components/schemas/AccountChannelsResponse"
                		# TODO: Add the rest of the JSON RPC responses here

									anyOf:
										$ref: "account_channels.yaml#/components/schemas/AccountChannelsResponse"
                		# TODO: Add the rest of the JSON RPC responses here

        # TODO: Verify my understanding of what error responses look like for rippled:
        "400":
          description: JSON-RPC error response object
          content:
            application/json:
              schema:
								$ref: "#/components/schemas/JsonRpcError"

				# TODO: Add the rest of the JSON RPC responses here

				# TODO: Add error responses
				# TODO: Add JsonRpcResponse / Request

components:
  schemas:
		JsonRpcRequest:
      type: object
      properties:
        jsonrpc:
          type: string
          enum: ["2.0"] # TODO: allow for different versions of the apis
          example: "2.0"
        id:
          type: integer
					description: A unique identifier for this request.
          example: 1
        method:
          $ref: "#/components/schemas/TransactionType"
        params:
          $ref: "#/components/schemas/TransactionParams"
      required:
        - id
        - method

    # TODO: Finish deriving this from ErrorResponse type in xrpl.js + type discrimination in the request section + adding the additional fields which show up in responses that are like requests! (e.g. ledger_index)
    JsonRpcError:
      type: object
      properties:
        result:
          type: object
          error: ledgerIndexMalformed # TODO: Make this error tie to the type of request below (which tells you the possible errors)
          request:
            allOf:
              $ref: "#/components/schemas/RequestType"
              # TODO: Add the "Response only" fields which are included in the `request` section of responses. These fields are in lowercase & not part of the request type like `ledger_index`.
              # In xrpl.js I believe
        status: error

    RequestType:
      discriminator:
        propertyName: method
        mapping:
          account_channels: "account_channels.yaml#/components/schemas/AccountChannelsRequest" # TODO: Verify this is the correct syntax
          # TODO: Add the rest of the JSON RPC requests here
        anyOf:
          - $ref: "account_channels.yaml#/components/schemas/AccountChannelsRequest"
          # TODO: Add the rest of the JSON RPC requests here

		JsonRPCErrorResponse:
			required:
	      - result
			result:
        type: object
        description: Object containing the response to the query.
        properties:
          error:
            type: string
            description: A unique code for the type of error that occurred.
          request:
            type: object
            description: "A copy of the request that prompted this error, in JSON format. Caution: If the request contained any account secrets, they are copied here! Note: The request is re-formatted in WebSocket format, regardless of the request made."
          status:
            type: string
            description: '"error" if the request caused an error.'

security:
  - apiKey: []  # Example security scheme, customize as needed
